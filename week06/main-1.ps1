# Example from Champlain College Course Material. 
# Edited by Savannah Ciak on 10/7/2025
 . (Join-Path $PSScriptRoot "Users.ps1")
. (Join-Path $PSScriptRoot "Event-Logs.ps1")

Clear-Host

$Prompt = "`n"
$Prompt += "Please choose your operation:`n"
$Prompt += "1 - List Enabled Users`n"
$Prompt += "2 - List Disabled Users`n"
$Prompt += "3 - Create a User`n"
$Prompt += "4 - Remove a User`n"
$Prompt += "5 - Enable a User`n"
$Prompt += "6 - Disable a User`n"
$Prompt += "7 - Get Log-In Logs`n"
$Prompt += "8 - Get Failed Log-In Logs`n"
$Prompt += "9 - Get at-risk Users`n"
$Prompt += "10 - Exit`n"



$operation = $true

while($operation){

    
    Write-Host $Prompt | Out-String
    $choice = Read-Host 


    if($choice -eq 10){
        Write-Host "Goodbye" | Out-String
        exit
        $operation = $false 
    }

    elseif($choice -eq 1){
        $enabledUsers = getEnabledUsers
        Write-Host ($enabledUsers | Format-Table | Out-String)
    }

    elseif($choice -eq 2){
        $notEnabledUsers = getNotEnabledUsers
        Write-Host ($notEnabledUsers | Format-Table | Out-String)
    }


    # Create a user
    elseif ($choice -eq 3) { 
        $name = Read-Host -Prompt "Please enter the username for the new user"
        $userExists = checkUser $name

        if ($userExists -eq $true) {
            Write-Host "There is already a user called $name"
        }
        elseif ($userExists -eq $false) {
            $password = Read-Host -AsSecureString -Prompt "Please enter the password for the new user"
            $plainPassword = [Runtime.InteropServices.Marshal]::PtrToStringAuto(
            [Runtime.InteropServices.Marshal]::SecureStringToBSTR($password)
            )

            # Below if/else statement generated by AI during troubleshooting. 
            if (checkPassword $plainPassword -eq $true) {
                $hashPW = ConvertTo-SecureString $plainPassword -AsPlainText -Force
                createAUser $name $hashPW
                Write-Host "User: $name is created." | Out-String
            }
            else {
                Write-Host "You didn't meet the password requirements. Try Again."
            }
        }
    }


    # Remove a user
    elseif($choice -eq 4){

        $name = Read-Host -Prompt "Please enter the username for the user to be removed"

        if (checkUser $name) { 
            removeAUser $name
            Write-Host "User: $name Removed." | Out-String }
            else { Write-Host "The username does not exist." }
    }


    # Enable a user
    elseif($choice -eq 5){


        $name = Read-Host -Prompt "Please enter the username for the user to be enabled"

        if (checkUser $name) {
            enableAUser $name
            Write-Host "User: $name Enabled." | Out-String }
            else { Write-Host "The username does not exist." }
    }


    # Disable a user
    elseif($choice -eq 6){

        $name = Read-Host -Prompt "Please enter the username for the user to be disabled"

        if (checkUser $name) {
        disableAUser $name
        Write-Host "User: $name Disabled." | Out-String }
        else { Write-Host "The username does not exist." }
    }



    elseif($choice -eq 7){

        $name = Read-Host -Prompt "Please enter the username for the user logs"

        if (checkUser $name) {
        $days = Read-Host "How many days of logs would you like to view"
        $userLogins = getLogInAndOffs $days
        Write-Host ($userLogins | Where-Object { $_.User -ilike "*$name"} | Format-Table | Out-String) }
        else { Write-Host "The username does not exist." }
    }


    elseif($choice -eq 8){

        $name = Read-Host -Prompt "Please enter the username for the user's failed login logs"

        if (checkUser $name) {
            $days = Read-Host "How many days of logs would you like to view"
            $userLogins = getFailedLogins $days
            Write-Host ($userLogins | Where-Object { $_.User -ilike "*$name"} | Format-Table | Out-String) }
            else { Write-Host "The username does not exist." }
    }



    elseif($choice -eq 9) {
        $days = Read-Host "How many days of logs would you like to view"
        Write-Host (getFailedLogins $days | Group-Object -Property User | Where-Object { $_.Count -gt 9} | Select Count, Name | Out-String) }

    else { Write-Host "$choice is invalid. Please try again with a number 1-10." }
}




